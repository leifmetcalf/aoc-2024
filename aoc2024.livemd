# Advent of Code 2024

## Common

```elixir
defmodule Prelude do
  def parse_grid(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn row -> String.split(row) |> Enum.map(&String.to_integer/1) end)
  end

  def transpose(xs) do
    List.zip(xs) |> Enum.map(&Tuple.to_list/1)
  end
end
```

```elixir
import Prelude
```

## Day 1

```elixir
defmodule Day1 do
  def input() do
    File.read!("/home/leif/Documents/aoc/1")
  end
  def parse(input) do
    parse_grid(input) |> transpose()
  end
end
```

```elixir
defmodule Day1.Part1 do
  @doc """
  iex> Day1.input() |> Day1.Part1.go()
  1506483
  """
  def go(input) do
    Day1.parse(input)
    |> Enum.map(&Enum.sort/1)
    |> Enum.zip_with(fn [x, y] -> abs(x - y) end)
    |> Enum.sum()
  end
end
```

```elixir
defmodule Day1.Part2 do
  @doc """
  iex> Day1.input() |> Day1.Part2.go()
  23126924
  """
  def go(input) do
    [xs, ys] = Day1.parse(input)
    freqs = Enum.frequencies(ys)
    Enum.map(xs, &(&1 * Map.get(freqs, &1, 0))) |> Enum.sum()
  end
end
```

## Day 2

```elixir
defmodule Day2 do
  def input() do
    File.read!("/home/leif/Documents/aoc/2")
  end

  def parse(input) do
    parse_grid(input)
  end

  def report_ok?(row) do
    differences =
      Enum.chunk_every(row, 2, 1, :discard)
      |> Enum.map(fn [x, y] -> x - y end)

    (Enum.all?(differences, &(&1 > 0)) or Enum.all?(differences, &(&1 < 0))) and
      Enum.all?(differences, fn d ->
        d = abs(d)
        d >= 1 and d <= 3
      end)
  end
end
```

```elixir
defmodule Day2.Part1 do
  @doc """
  iex> Day2.input() |> Day2.Part1.go()
  220
  """
  def go(input) do
    Day2.parse(input) |> Enum.count(&Day2.report_ok?/1)
  end
end
```

```elixir
defmodule Day2.Part2 do
  @doc """
  iex> Day2.input() |> Day2.Part2.go()
  296
  """
  def go(input) do
    Day2.parse(input)
    |> Enum.count(fn report ->
      Enum.any?(
        0..(length(report) - 1),
        fn i -> List.delete_at(report, i) |> Day2.report_ok?() end
      )
    end)
  end
end
```
